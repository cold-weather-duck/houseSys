<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd" 
	xmlns:tx="http://www.springframework.org/schema/tx">
    <!--
    <context:component-scan base-package="com"/>  
    -->
    <context:component-scan base-package="com"><!--根包-->
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

    <aop:aspectj-autoproxy/>

    <!-- 占位符所引用文件的路径
	<context:property-placeholder location="classpath:datasource.properties" />
	-->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/house?useSSL=false" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<!-- 
		<property name="maxActive" value="50" />
		<property name="maxIdle" value="10" />
		<property name="maxWait" value="10000" />
		 -->
	    <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT NOW()" />
        <!--是否要进行检测-->
        <property name="testWhileIdle" value="true" />
        <!--是否在数据库连接请求量大的时候，如总数50，当前已请求了49个，所剩不多了，检测那些执行时间久的连接-->
        <property name="removeAbandoned" value="true"/>
        <!--每次检测时，需要检测多少个数据连接，一般设置为与最大连接数一样，这样就可以检测完所有的连接-->
        <property name="numTestsPerEvictionRun" value="20"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,保险起见还是检测吧-->
        <property name="testOnBorrow" value="true" />
        <!--归还连接时执行validationQuery检测连接是否有效-->
        <property name="testOnReturn" value="true" />
	</bean>

	<!--	
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/mysql" resource-ref="true" />
	-->

   <!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    <property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dao"></property>	
	</bean>

<!--
<bean id="demoService" class="com.service.impl.DemoService" p:demoDao-ref="demoDao"></bean>
		
<bean id="indexAction" class="com.action.IndexAction" scope="prototype" p:demoService-ref="demoService"></bean>
-->

    <!-- 声明式事务管理 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务属性的配置 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">        
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>            
            <tx:method name="insert*" rollback-for="java.sql.SQLException"/>
            <tx:method name="update*"/><!--方法命名规范-->
            <tx:method name="delete*"/>
            <tx:method name="test*"/>
        </tx:attributes>
    </tx:advice>

    <!--切点-->
    <aop:config>
        <aop:pointcut id="hehe" expression="execution(public * com.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="hehe"/>
    </aop:config>
</beans>